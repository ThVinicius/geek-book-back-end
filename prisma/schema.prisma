// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int              @id @default(autoincrement())
  nickname      String           @unique @db.VarChar(16)
  avatar        String?
  email         String           @unique
  password      String?
  authorizeType OAuthType        @default(EMAIL)
  createdAt     DateTime         @default(now()) @db.Timestamptz(6)
  session       Session?
  userHistory   UserCollection[]
  share         Share?
  Ranking       Ranking[]

  @@map("users")
}

enum OAuthType {
  EMAIL
  GITHUB
}

model Session {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  token     String
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Category {
  id         Int          @id @default(autoincrement())
  name       String       @unique
  createdAt  DateTime     @default(now()) @db.Timestamptz(6)
  Collection Collection[]

  @@map("categories")
}

model Collection {
  id             Int              @id @default(autoincrement())
  name           String
  categoryId     Int
  poster         String?
  synopsis       String?
  createdAt      DateTime         @default(now()) @db.Timestamptz(6)
  category       Category         @relation(fields: [categoryId], references: [id])
  userCollection UserCollection[]

  @@unique([name, categoryId])
  @@map("collections")
}

model Status {
  id             Int              @id @default(autoincrement())
  name           String           @unique
  createdAt      DateTime         @default(now()) @db.Timestamptz(6)
  UserCollection UserCollection[]

  @@map("status")
}

model UserCollection {
  id           Int        @id @default(autoincrement())
  userId       Int
  collectionId Int
  lastSeen     Float
  statusId     Int
  public       Boolean    @default(true)
  createdAt    DateTime   @default(now()) @db.Timestamptz(6)
  user         User       @relation(fields: [userId], references: [id])
  collection   Collection @relation(fields: [collectionId], references: [id])
  status       Status     @relation(fields: [statusId], references: [id])
  Ranking      Ranking[]

  @@unique([userId, collectionId])
  @@map("userCollections")
}

model Ranking {
  id               Int            @id @default(autoincrement())
  userId           Int
  userCollectionId Int
  position         Int            @db.Integer
  user             User           @relation(fields: [userId], references: [id])
  userCollection   UserCollection @relation(fields: [userCollectionId], references: [id], onDelete: Cascade)

  @@unique([userId, userCollectionId])
  @@map("rankings")
}

model Share {
  id       Int    @id @default(autoincrement())
  userId   Int    @unique
  shortUrl String @unique @db.VarChar(9)
  user     User   @relation(fields: [userId], references: [id])

  @@map("shares")
}
