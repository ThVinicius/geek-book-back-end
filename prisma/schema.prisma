// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int              @id @default(autoincrement())
  nickname    String           @unique @db.VarChar(16)
  avatar      String?
  email       String           @unique
  password    String
  createdAt   DateTime         @default(now()) @db.Timestamptz(6)
  session     Session?
  userHistory UserCollection[]
  share       Share?

  @@map("users")
}

model Session {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  token     String
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  user      User     @relation(fields: [userId], references: [id])

  @@map("sessions")
}

model Category {
  id         Int          @id @default(autoincrement())
  name       String       @unique
  createdAt  DateTime     @default(now()) @db.Timestamptz(6)
  Collection Collection[]

  @@map("categories")
}

model Collection {
  id             Int              @id @default(autoincrement())
  name           String           @unique
  categoryId     Int
  poster         String?
  synopsis       String?
  createdAt      DateTime         @default(now()) @db.Timestamptz(6)
  category       Category         @relation(fields: [categoryId], references: [id])
  userCollection UserCollection[]

  @@map("collections")
}

model Status {
  id             Int              @id @default(autoincrement())
  name           String           @unique
  createdAt      DateTime         @default(now()) @db.Timestamptz(6)
  UserCollection UserCollection[]

  @@map("status")
}

model UserCollection {
  id           Int        @id @default(autoincrement())
  userId       Int
  collectionId Int
  lastSeen     Int
  statusId     Int
  createdAt    DateTime   @default(now()) @db.Timestamptz(6)
  user         User       @relation(fields: [userId], references: [id])
  collection   Collection @relation(fields: [collectionId], references: [id])
  status       Status     @relation(fields: [statusId], references: [id])

  @@unique([userId, collectionId])
  @@map("userCollections")
}

model Share {
  id       Int    @id @default(autoincrement())
  userId   Int    @unique
  shortUrl String @unique @db.VarChar(9)
  user     User   @relation(fields: [userId], references: [id])

  @@map("shares")
}
